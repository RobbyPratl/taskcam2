{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport BASEAPIURL from \"../vars\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Register = function Register() {\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    email = _useState2[0],\n    setEmail = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var _useState5 = useState(\"\"),\n    _useState6 = _slicedToArray(_useState5, 2),\n    errorMessage = _useState6[0],\n    setErrorMessage = _useState6[1];\n  var handleRegister = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var response = yield fetch(BASEAPIURL + \"/auth/register\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            email: email,\n            password: password\n          })\n        });\n        if (response.ok) {\n          console.log(\"Registration successful\");\n        } else {\n          var errorData = yield response.json();\n          setErrorMessage(errorData.message);\n        }\n      } catch (error) {\n        console.error(\"An error occurred:\", error);\n        setErrorMessage(\"An error occurred. Please try again.\");\n      }\n    });\n    return function handleRegister() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Register\"\n    }), errorMessage ? _jsx(Text, {\n      style: styles.error,\n      children: errorMessage\n    }) : null, _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Email\",\n      value: email,\n      onChangeText: setEmail,\n      autoCapitalize: \"none\"\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Password\",\n      value: password,\n      onChangeText: setPassword,\n      secureTextEntry: true\n    }), _jsx(TouchableOpacity, {\n      style: styles.button,\n      onPress: handleRegister,\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Register\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    padding: 20\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: \"bold\",\n    marginBottom: 20\n  },\n  input: {\n    width: \"100%\",\n    height: 40,\n    borderColor: \"gray\",\n    borderWidth: 1,\n    borderRadius: 5,\n    paddingHorizontal: 10,\n    marginBottom: 10\n  },\n  button: {\n    backgroundColor: \"blue\",\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 5,\n    marginTop: 20\n  },\n  buttonText: {\n    color: \"white\",\n    fontWeight: \"bold\",\n    fontSize: 16\n  },\n  error: {\n    color: \"red\",\n    marginBottom: 10\n  }\n});\nexport default Register;","map":{"version":3,"names":["React","useState","View","Text","TextInput","TouchableOpacity","StyleSheet","BASEAPIURL","jsx","_jsx","jsxs","_jsxs","Register","_useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","_useState5","_useState6","errorMessage","setErrorMessage","handleRegister","_ref","_asyncToGenerator","response","fetch","method","headers","body","JSON","stringify","ok","console","log","errorData","json","message","error","apply","arguments","style","styles","container","children","title","input","placeholder","value","onChangeText","autoCapitalize","secureTextEntry","button","onPress","buttonText","create","flex","justifyContent","alignItems","padding","fontSize","fontWeight","marginBottom","width","height","borderColor","borderWidth","borderRadius","paddingHorizontal","backgroundColor","paddingVertical","marginTop","color"],"sources":["/Users/robertpratl/taskcam-summer-project/client/screens/Register.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  StyleSheet,\n} from \"react-native\";\nimport BASEAPIURL from \"../vars\";\n\nconst Register = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const handleRegister = async () => {\n    try {\n      const response = await fetch(`${BASEAPIURL}/auth/register`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (response.ok) {\n        // Registration successful, handle success\n        // For example, display a success message or navigate to a success screen\n        console.log(\"Registration successful\");\n      } else {\n        // Registration failed, handle error\n        const errorData = await response.json();\n        setErrorMessage(errorData.message);\n      }\n    } catch (error) {\n      console.error(\"An error occurred:\", error);\n      setErrorMessage(\"An error occurred. Please try again.\");\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Register</Text>\n      {errorMessage ? <Text style={styles.error}>{errorMessage}</Text> : null}\n      <TextInput\n        style={styles.input}\n        placeholder=\"Email\"\n        value={email}\n        onChangeText={setEmail}\n        autoCapitalize=\"none\"\n      />\n      <TextInput\n        style={styles.input}\n        placeholder=\"Password\"\n        value={password}\n        onChangeText={setPassword}\n        secureTextEntry\n      />\n      <TouchableOpacity style={styles.button} onPress={handleRegister}>\n        <Text style={styles.buttonText}>Register</Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    padding: 20,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: \"bold\",\n    marginBottom: 20,\n  },\n  input: {\n    width: \"100%\",\n    height: 40,\n    borderColor: \"gray\",\n    borderWidth: 1,\n    borderRadius: 5,\n    paddingHorizontal: 10,\n    marginBottom: 10,\n  },\n  button: {\n    backgroundColor: \"blue\",\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 5,\n    marginTop: 20,\n  },\n  buttonText: {\n    color: \"white\",\n    fontWeight: \"bold\",\n    fontSize: 16,\n  },\n  error: {\n    color: \"red\",\n    marginBottom: 10,\n  },\n});\n\nexport default Register;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}